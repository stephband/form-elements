
/*
The CSS that makes this web component flexible may look a little funky. The
width of the component dictates the size of the handle, track and tick radius,
then those elements push the (automatic) height of the component. The ticks are
normally layed out vertically before being transformed. They are usually the
tallest element. If there are no ticks the component will collapse a bit
smaller.
*/

:host {
    --normal-value: 0;
    --normal-zero:  0;

    /** --handle-size **/
    --handle-size: calc(100% - 4rem);

    /** --handle-shadow **/
    --handle-shadow: 0 0.1875rem 0.375rem 0 rgba(0, 0, 0, 0.2);

    /** --track-width **/
    --track-size: 0.5rem;

    /** --track-shadow **/
    --track-shadow:
        inset 0 0.25rem 0.5rem rgba(0, 0, 0, 0.24),
        inset 0 0 0 1px rgba(0,0,0,0.125);

    /**
    --rotation-start
    Angle (clockwise from south) at which to start rotational travel.
    **/
    --rotation-start: 30deg;

    /**
    --rotation-range
    Angle (clockwise from south) through which handle travels.
    **/
    --rotation-range: 300deg;

    /**
    --touch-range
    Vertical distance of mouse or touch movement that results in one
    full range of rotation of the handle. Cannot be specified as a `%` length,
    other length units accepted..
    **/
    --touch-range: 15rem;

    --dot-width: 0.3125rem;
    --dot-height: var(--dot-width);
    --dot-distance: calc(50% - 0.5rem);
    --dot-background: #46789a;
    --dot-border: none;
    --dot-shadow: none;

    --focus-shadow: inset 0 0 0.9375rem hsla(200, 100%, 80%, 0.4);

    display: inline-grid;
    min-width: 7.5em;
    grid-template-areas:
        'handle handle'
        'label plugs';
    grid-template-columns: 1fr min-content;
    grid-row-gap: 0.375rem;

    /*grid-template-rows: calc(2 * var(--tick-distance) + 2 * var(--tick-width) + 2 * var(--tick-line-height)) min-content;*/
    align-items: center;
    justify-items: center;
    align-content: start;
    justify-content: center;
}

:host(:focus) {
    --value-color: #75ebff;
    --output-color: white;
    --handle-background: #46789a;
    --handle-border: 1px solid #46789a;
    --dot-background: white;
    --tick-color: #46789a;
    --tick-background: #46789a;
    --track-shadow:
        inset 0 0.25rem 0.5rem rgba(0, 0, 0, 0.24),
        inset 0 0 0 1px rgba(0,0,0,0.125);

    /* Nullify simulated focus style. */
    outline-width: 0 !important;
    box-shadow: none !important;
}

:host > .handle {
    grid-area: handle;
    z-index: 2;
}

:host > [part="tick"] {
    grid-area: handle;
    z-index: 1;
    transform: rotate3d(0, 0, 1, calc(var(--rotation-start) + var(--normal-value) * var(--rotation-range)));
}

:host > [part="tick"] > span {
    transform: translate3d(-50%, 0, 0) rotate3d(0, 0, 1, calc(-1 * (var(--rotation-start) + var(--normal-value) * var(--rotation-range)))) translate3d(calc(var(--normal-value) * 6.28318531 /*|sin*/ * -33%), 0, 0);
}

:host > [part="label"] {
    grid-area: label;
    text-align: center;
}

:host > [part="output"] {
    grid-area: handle;
    z-index: 2;
    /* As it is overlayed on handle ignore pointer events */
    pointer-events: none;
}
